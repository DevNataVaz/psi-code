---
import Layout from '../layouts/Layout.astro';
---

<Layout>
    <div class="dashboard">
        <header class="main-header">
            <a href="/" class="logo">Psi Jess</a>
            <button class="toggle-sidebar-btn">â˜°</button>
        </header>
        
        <aside class="topics-sidebar">
            <div class="topics-header">
                <button class="new-topic-btn">+ New chat</button>
            </div>
            <div class="topics-list">
                <!-- Topics will be dynamically added here -->
            </div>
            <button class="show-more-btn">Show more</button>
        </aside>

        <main class="chat-area">
            <div class="chat-container">
                <div class="messages" id="messages">
                    <!-- Messages will appear here -->
                </div>

                <div class="message-input">
                    <textarea 
                        placeholder="Send a message..."
                        rows="1"
                        id="messageInput"
                    ></textarea>
                    <button class="send-button">
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
                            <path d="M2 12l7-7v4h13v6H9v4l-7-7z" fill="currentColor"/>
                        </svg>
                    </button>
                </div>
            </div>
        </main>
    </div>
</Layout>

<style>
    .dashboard {
        display: grid;
        grid-template-columns: 260px 1fr;
        grid-template-rows: auto 1fr;
        height: 100vh;
        background-color: #343541;
    }

    .main-header {
        grid-column: 1 / -1;
        padding: 1rem;
        background: #343541;
        border-bottom: 1px solid rgba(255,255,255,0.1);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .logo {
        color: #fff;
        font-size: 1.5rem;
        font-weight: 600;
        text-decoration: none;
        transition: opacity 0.2s;
    }

    .logo:hover {
        opacity: 0.8;
    }

    .toggle-sidebar-btn {
        background: none;
        border: none;
        color: #fff;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .topics-sidebar {
        background: #202123;
        padding: 1rem;
        border-right: 1px solid rgba(255,255,255,0.1);
        overflow-y: auto;
    }

    .new-topic-btn, .show-more-btn {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 0.375rem;
        background: transparent;
        color: #fff;
        font-size: 0.875rem;
        transition: background-color 0.2s;
        margin-top: 0.5rem;
    }

    .new-topic-btn:hover, .show-more-btn:hover {
        background: rgba(255,255,255,0.1);
    }

    .topic-item {
        padding: 0.75rem;
        margin: 0.5rem 0;
        border-radius: 0.375rem;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .topic-item:hover {
        background: rgba(255,255,255,0.1);
    }

    .topic-item.active {
        background: rgba(255,255,255,0.1);
    }

    .chat-area {
        background: #343541;
        padding: 2rem;
        overflow-y: auto;
    }

    .messages {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .message {
        display: flex;
        padding: 1rem;
        color: #fff;
    }

    .message.patient {
        background: #343541;
    }

    .message.therapist {
        background: #444654;
    }

    .message-input {
        position: fixed;
        bottom: 0;
        left: 260px;
        right: 0;
        padding: 1.5rem;
        background: #343541;
        border-top: 1px solid rgba(255,255,255,0.1);
    }

    .message-input textarea {
        width: 100%;
        max-width: 48rem;
        margin: 0 auto;
        display: block;
        padding: 0.75rem;
        background: #40414f;
        border: 1px solid rgba(255,255,255,0.1);
        border-radius: 0.375rem;
        color: #fff;
        resize: none;
    }

    .send-button {
        position: absolute;
        right: 2rem;
        bottom: 2rem;
        color: #fff;
        padding: 0.5rem;
        border-radius: 0.375rem;
        opacity: 0.7;
        transition: opacity 0.2s;
    }

    .send-button:hover {
        opacity: 1;
    }

    @media (max-width: 768px) {
        .dashboard {
            grid-template-columns: 1fr;
        }

        .topics-sidebar {
            position: fixed;
            left: -260px;
            top: 0;
            bottom: 0;
            transition: left 0.3s ease;
            z-index: 1000;
        }

        .topics-sidebar.active {
            left: 0;
        }

        .message-input {
            left: 0;
        }
    }
</style>

<script>
    let topics = [];
    let activeTopic = null;

    async function loadTopics() {
        try {
            const response = await fetch('/api/topics');
            topics = await response.json();
            updateTopicsList();
        } catch (error) {
            console.error('Error loading topics:', error);
        }
    }

    async function createNewChat() {
        try {
            const response = await fetch('/api/topics', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title: 'New Chat' })
            });
            const newTopic = await response.json();
            topics.unshift(newTopic);
            updateTopicsList();
            setActiveTopic(newTopic.id);
        } catch (error) {
            console.error('Error creating new chat:', error);
        }
    }

    function updateTopicsList() {
        const topicsList = document.querySelector('.topics-list');
        if (!topicsList) return;

        topicsList.innerHTML = topics.map(topic => `
            <div class="topic-item ${topic.id === activeTopic?.id ? 'active' : ''}" 
                 data-topic-id="${topic.id}">
                ${topic.title}
            </div>
        `).join('');

        // Add click handlers for topics
        document.querySelectorAll('.topic-item').forEach(item => {
            item.addEventListener('click', () => {
                const topicId = parseInt(item.getAttribute('data-topic-id') || '0');
                loadTopicMessages(topicId);
            });
        });
    }

    async function loadTopicMessages(topicId) {
        try {
            const response = await fetch(`/api/topics/${topicId}/messages`);
            const messages = await response.json();
            setActiveTopic(topicId);
            displayMessages(messages);
        } catch (error) {
            console.error('Error loading messages:', error);
        }
    }

    function displayMessages(messages) {
        const messagesContainer = document.querySelector('#messages');
        if (!messagesContainer) return;

        messagesContainer.innerHTML = messages.map(message => `
            <div class="message ${message.is_patient ? 'patient' : 'therapist'}">
                <div class="message-content">${message.content}</div>
            </div>
        `).join('');
    }

    async function sendMessage() {
        const messageInput = document.querySelector('#messageInput');
        const message = messageInput?.value.trim();
        if (!message || !activeTopic) return;

        try {
            const response = await fetch(`/api/topics/${activeTopic}/messages`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    content: message,
                    is_patient: true
                })
            });

            const newMessage = await response.json();
            
            if (topics[0].messages.length === 0) {
                updateTopicTitle(activeTopic, message);
            }

            const messageElement = document.createElement('div');
            messageElement.className = 'message patient';
            messageElement.innerHTML = `<div class="message-content">${message}</div>`;
            
            document.querySelector('#messages')?.appendChild(messageElement);
            
            messageInput.value = '';
            messageInput.focus();
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }

    function updateTopicTitle(topicId, firstMessage) {
        const topic = topics.find(t => t.id === topicId);
        if (topic) {
            topic.title = firstMessage.slice(0, 30) + (firstMessage.length > 30 ? '...' : '');
            updateTopicsList();
        }
    }

    function setActiveTopic(topicId) {
        activeTopic = topics.find(t => t.id === topicId);
        updateTopicsList();
    }

    document.addEventListener('DOMContentLoaded', () => {
        loadTopics();
        document.querySelector('.new-topic-btn')?.addEventListener('click', createNewChat);
        const messageInput = document.querySelector('#messageInput');
        const sendButton = document.querySelector('.send-button');
        sendButton?.addEventListener('click', sendMessage);
        messageInput?.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage();
            }
        });

        // Toggle sidebar for mobile view
        const toggleSidebarBtn = document.querySelector('.toggle-sidebar-btn');
        const topicsSidebar = document.querySelector('.topics-sidebar');
        toggleSidebarBtn?.addEventListener('click', () => {
            topicsSidebar?.classList.toggle('active');
        });
    });
</script>